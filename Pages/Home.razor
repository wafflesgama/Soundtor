@page "/"
@page "/home"
@inject IJSRuntime JS;

<PageTitle>Index</PageTitle>

<h1>MIDI instrument generator</h1>

<div class="oneline">
    <label class="ipLabel">Machine IP:</label>
    <input placeholder="Local & Remote IP" value=@ip />
    <input placeholder="Local & Remote Port" value=@port />
    <button @onclick=ConnectDisconnect>@connectMessage</button>
    <button @onclick=ToggleDebug>Debug</button>
</div>

@if (showDebug)
{
 @*   <div class="connectionOutput"> The connection was successfull</div>*@
    <div class="debugPanel">
        <textarea class="connectionOutput" value=@debugText />
        <button @onclick=SendDebugData>Submit raw command</button>
    </div>
}

<div class="generatorInput">
    <p>I want an instrument like:</p>
    <br />
    <div>
        <button class="tag_vibe">Funky</button>
        <button class="tag_vibe">Jazzy</button>
        <button class="tag_atmos">Grim</button>
        <button class="tag_genre">Classical</button>
        <button class="tag_atmos">Noisy</button>
        <button class="tag_vibe">Jazzy</button>
    </div>
    <div class="inputResultContainer">
        <div class="inputResult">Add one or more tags...</div>
        <button class="generateButton">Make it!</button>
    </div>
    <p>Choose at maximum <b>1</b> of each category</p>
</div>

<style>
    .oneline {
        display: flex;
        flex-direction: row;
        align-content: center;
    }

    .ipLabel {
        margin-right: 10px;
    }

    .connectionOutput {
        padding: 20px;
        margin: 15px;
        background-color: #f1f1f1;
        font-size: 13px;
        border-radius: 5px;
        border: 1px solid #d7d7d7;
    }

    .debugPanel{
        display:inline-flex;
        margin-top:15px;
        min-height:200px;
    }

    /* button{
                    border-radius: 5px;
                    color:white;
                    background-color:var(--backColor);
                }*/

    .generatorInput {
        margin-top: 45px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .tag_genre {
        border-style: solid;
        border-radius: 25px;
        padding: 5px;
        border-color: #FFD53F;
        background-color: #FCF8EC;
    }

    .tag_genre:active {
        border-style: solid;
        border-radius: 25px;
        padding: 5px;
        border-color: #DDB833;
        background-color: #F2EEDE;
    }

    .tag_atmos {
        border-style: solid;
        border-radius: 25px;
        padding: 5px;
        border-color: #3F97FF;
        background-color: #ECF4FC;
    }
    .tag_atmos:active {
        border-style: solid;
        border-radius: 25px;
        padding: 5px;
        border-color: #3A84DA;
        background-color: #E1E9F0;
    }
    
    .tag_vibe {
        border-style: solid;
        border-radius: 25px;
        padding: 5px;
        border-color: #3FFF75;
        background-color: #EDFCEC;
    }

    .tag_vibe:active {
        border-style: solid;
        border-radius: 25px;
        padding: 5px;
        border-color: #37E467;
        background-color: #E4F3E3;
    }


    .inputResultContainer {
        margin-top: 10px;
        display: flex;
        filter: drop-shadow(5px 5px 4px #808080);
        background-color: white;
    }

    .inputResult {
        pointer-events: none;
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 15px;
        border-radius: 4px 0px 0px 4px;
        width: 500px;
        line-height: 25px;
        border: 2px solid black;
    }

    .generateButton {
        border-style: solid;
        border-radius: 0px 4px 4px 0px;
        color: white;
        background-color: var(--backColor);
        padding-right: 15px;
        padding-left: 15px;
        font-weight: bold;
        margin-left: -2px;
        border-color: #000000;
        margin-right: -2px;
        line-height: 25px;
    }

    .generateButton:active {
        border-style: solid;
        border-radius: 0px 4px 4px 0px;
        color: white;
        background-color: #E3E3E3;
        padding-right: 15px;
        font-weight: bold;
        margin-left: -2px;
        border-color: #000000;
        color: #000000;
        margin-right: -2px;
    }
</style>

@code {

    private bool showDebug, showConnectionOutput, showOutput, isConnected;
    private string connectMessage = "Connect";
    private string debugText = "";
    private string ip = "", port = "";

    private void ConnectDisconnect()
    {
        isConnected = !isConnected;

        if (isConnected)
        {
            Console.WriteLine("Calling OpenPort JS");
            JS.InvokeVoidAsync("OpenPort", ip, port, ip, port);
        }
        else
            JS.InvokeVoidAsync("ClosePort");

        RefreshConnectText();
    }


    private void ToggleDebug()
    {
        showDebug = !showDebug;
    }

    private void RefreshConnectText() => connectMessage = isConnected ? "Disconnect"
    : "Connect";

    private void SendDebugData()
    {
        if (debugText.Trim() == "") return;

        SendData(debugText);
    }

    private void SendData(string msg)
    {
        JS.InvokeVoidAsync("SendData", msg);
    }
}