@page "/"
@page "/home"
@inject IJSRuntime JS;

<PageTitle>Index</PageTitle>

<h1>MIDI instrument generator</h1>

<div class="oneline">
    <label class="ipLabel">Machine IP:</label>
    <input placeholder="Local & Remote IP" value=@ip />
    <input placeholder="Local & Remote Port" value=@port />
    <button @onclick=ConnectDisconnect>@connectMessage</button>
    <button @onclick=ToggleDebug>Debug</button>
</div>

@if (showDebug)
{
    <div class="connectionOutput"> The connection was successfull</div>
    <div class="debugPanel">
        <textarea class="connectionOutput" value=@debugText />
        <button>Submit raw command</button>
    </div>
}

<div class="generatorInput">
    <p>I want an instrument like:</p>
    <br />
    <div>
        <button class="tag">Funky</button>
        <button class="tag">Jazzy</button>
        <button class="tag">Grim</button>
        <button class="tag">Classical</button>
        <button class="tag">Noisy</button>
        <button class="tag">Jazzy</button>
    </div>
    <div class="inputResultContainer">
        <div class="inputResult">Add one or more tags...</div>
        <button class="generateButton">Make it!</button>
    </div>
    <p>Choose at maximum <b>1</b> of each category</p>
</div>

<style>
    .oneline {
        display: flex;
        flex-direction: row;
        align-content: center;
    }

    .ipLabel {
        margin-right: 10px;
    }

    .connectionOutput {
        padding: 20px;
        margin: 15px;
        background-color: #f1f1f1;
        font-size: 13px;
        border-radius: 5px;
        border: 1px solid #d7d7d7;
    }

    /* button{
                    border-radius: 5px;
                    color:white;
                    background-color:var(--backColor);
                }*/

    .generatorInput {
        margin-top: 45px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .tag {
        border-radius: 25px;
        padding: 5px;
    }

    .inputResultContainer {
        margin-top: 10px;
        display: flex;
    }

    .inputResult {
        pointer-events: none;
        padding: 5px;
        border-radius: 25px 0px 0px 25px;
        width: 500px;
        height: 25px;
        border: 2px solid black;
    }

    .generateButton {
        border-radius: 0px 25px 25px 0px;
        color: white;
        background-color: var(--backColor);
        padding-right: 15px;
        font-weight: bold;
        margin-left: -2px;
    }
</style>

@code {

    private bool showDebug, showConnectionOutput, showOutput, isConnected;
    private string connectMessage = "Connect";
    private string debugText = "";
    private string ip = "", port = "";

    private void ConnectDisconnect()
    {
        isConnected = !isConnected;

        if (isConnected)
        {
            Console.WriteLine("Calling OpenPort JS");
            JS.InvokeVoidAsync("OpenPort", ip, port, ip, port);
        }
        else
            JS.InvokeVoidAsync("ClosePort");

        RefreshConnectText();
    }


    private void ToggleDebug()
    {
        showDebug = !showDebug;
    }

    private void RefreshConnectText() => connectMessage = isConnected ? "Disconnect"
    : "Connect";

    private void SendDebugData()
    {
        if (debugText.Trim() == "") return;

        SendData(debugText);
    }

    private void SendData(string msg)
    {
        JS.InvokeVoidAsync("SendData", msg);
    }
}